#!/usr/bin/env python3
"""
Environment Setup Script for Jain Global Slack Trading Bot

This script helps you set up your environment variables and validate your configuration
before deploying to Render or running locally.
"""

import os
import sys
import re
from typing import Dict, Optional, Tuple
import requests
from urllib.parse import urlparse

def print_banner():
    """Print setup banner."""
    print("=" * 70)
    print("ü§ñ Jain Global Slack Trading Bot - Environment Setup")
    print("=" * 70)
    print()

def print_section(title: str):
    """Print section header."""
    print(f"\nüìã {title}")
    print("-" * 50)

def get_user_input(prompt: str, default: str = "", required: bool = True, 
                  validator: Optional[callable] = None) -> str:
    """Get user input with validation."""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if not user_input and required:
            print("‚ùå This field is required. Please enter a value.")
            continue
        
        if validator and user_input:
            is_valid, error_msg = validator(user_input)
            if not is_valid:
                print(f"‚ùå {error_msg}")
                continue
        
        return user_input

def validate_slack_token(token: str) -> Tuple[bool, str]:
    """Validate Slack bot token format."""
    if not token.startswith('xoxb-'):
        return False, "Slack bot token must start with 'xoxb-'"
    
    if len(token) < 50:
        return False, "Slack bot token appears to be too short"
    
    return True, ""

def validate_api_key(key: str) -> Tuple[bool, str]:
    """Validate API key format (basic check)."""
    if len(key) < 10:
        return False, "API key appears to be too short"
    
    if ' ' in key:
        return False, "API key should not contain spaces"
    
    return True, ""

def validate_database_url(url: str) -> Tuple[bool, str]:
    """Validate database URL format."""
    if url.startswith('sqlite:'):
        return True, ""
    
    if not (url.startswith('postgresql://') or url.startswith('postgres://')):
        return False, "Database URL must start with 'postgresql://' or 'postgres://'"
    
    try:
        parsed = urlparse(url)
        if not parsed.hostname:
            return False, "Database URL must include hostname"
        return True, ""
    except Exception:
        return False, "Invalid database URL format"

def test_finnhub_api(api_key: str) -> bool:
    """Test Finnhub API connection."""
    try:
        response = requests.get(
            f"https://finnhub.io/api/v1/quote?symbol=AAPL&token={api_key}",
            timeout=10
        )
        return response.status_code == 200 and 'c' in response.json()
    except Exception:
        return False

def test_alpaca_api(api_key: str, secret_key: str) -> bool:
    """Test Alpaca API connection."""
    try:
        # Basic HTTP test instead of requiring alpaca-trade-api
        import base64
        credentials = base64.b64encode(f"{api_key}:{secret_key}".encode()).decode()
        headers = {
            'Authorization': f'Basic {credentials}',
            'Content-Type': 'application/json'
        }
        response = requests.get(
            'https://paper-api.alpaca.markets/v2/account',
            headers=headers,
            timeout=10
        )
        return response.status_code == 200
    except Exception:
        return False

def create_env_file(config: Dict[str, str], filename: str = ".env"):
    """Create .env file with configuration."""
    with open(filename, 'w') as f:
        f.write("# Jain Global Slack Trading Bot - Environment Configuration\n")
        f.write("# Generated by setup script\n\n")
        
        # Slack Configuration
        f.write("# =============================================================================\n")
        f.write("# SLACK CONFIGURATION\n")
        f.write("# =============================================================================\n")
        f.write(f"SLACK_BOT_TOKEN={config['SLACK_BOT_TOKEN']}\n")
        f.write(f"SLACK_SIGNING_SECRET={config['SLACK_SIGNING_SECRET']}\n\n")
        
        # Database Configuration
        f.write("# =============================================================================\n")
        f.write("# DATABASE CONFIGURATION\n")
        f.write("# =============================================================================\n")
        f.write(f"DATABASE_URL={config['DATABASE_URL']}\n\n")
        
        # Market Data API
        f.write("# =============================================================================\n")
        f.write("# MARKET DATA API\n")
        f.write("# =============================================================================\n")
        f.write(f"FINNHUB_API_KEY={config['FINNHUB_API_KEY']}\n\n")
        
        # Trading API
        f.write("# =============================================================================\n")
        f.write("# TRADING API\n")
        f.write("# =============================================================================\n")
        f.write(f"ALPACA_API_KEY={config['ALPACA_API_KEY']}\n")
        f.write(f"ALPACA_SECRET_KEY={config['ALPACA_SECRET_KEY']}\n\n")
        
        # Application Settings
        f.write("# =============================================================================\n")
        f.write("# APPLICATION SETTINGS\n")
        f.write("# =============================================================================\n")
        f.write(f"ENVIRONMENT={config.get('ENVIRONMENT', 'development')}\n")
        f.write(f"HOST={config.get('HOST', '0.0.0.0')}\n")
        f.write(f"PORT={config.get('PORT', '8080')}\n")
        f.write(f"LOG_LEVEL={config.get('LOG_LEVEL', 'INFO')}\n")
        f.write(f"DEBUG_MODE={config.get('DEBUG_MODE', 'true')}\n")

def main():
    """Main setup function."""
    print_banner()
    
    print("This script will help you configure your environment for the Slack Trading Bot.")
    print("You'll need to have API keys ready from Slack, Finnhub, and Alpaca.")
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    config = {}
    
    # Slack Configuration
    print_section("Slack Configuration")
    print("Get these from your Slack App at https://api.slack.com/apps")
    print("1. Create new app ‚Üí 'From scratch'")
    print("2. Add OAuth scopes: commands, chat:write, chat:write.public")
    print("3. Install to workspace")
    print("4. Copy Bot Token (xoxb-...) and Signing Secret")
    print()
    
    config['SLACK_BOT_TOKEN'] = get_user_input(
        "Slack Bot Token (xoxb-...)",
        required=True,
        validator=validate_slack_token
    )
    
    config['SLACK_SIGNING_SECRET'] = get_user_input(
        "Slack Signing Secret",
        required=True,
        validator=validate_api_key
    )
    
    # Database Configuration
    print_section("Database Configuration")
    print("For local development, SQLite is recommended (no setup required)")
    print("For production, PostgreSQL will be provided by Render")
    print()
    
    db_choice = input("Use SQLite for local development? (Y/n): ").strip().lower()
    if db_choice in ['', 'y', 'yes']:
        config['DATABASE_URL'] = 'sqlite:///./jain_trading_bot.db'
        print("‚úÖ Using SQLite database")
    else:
        config['DATABASE_URL'] = get_user_input(
            "PostgreSQL Database URL",
            default="postgresql://localhost:5432/jain_trading_bot",
            required=True,
            validator=validate_database_url
        )
    
    # Market Data API
    print_section("Market Data API (Finnhub)")
    print("Get a free API key from https://finnhub.io")
    print("1. Sign up for free account")
    print("2. Go to dashboard and copy API key")
    print("3. Free tier: 60 calls/minute")
    print()
    
    config['FINNHUB_API_KEY'] = get_user_input(
        "Finnhub API Key",
        required=True,
        validator=validate_api_key
    )
    
    # Test Finnhub API
    print("üîç Testing Finnhub API connection...")
    if test_finnhub_api(config['FINNHUB_API_KEY']):
        print("‚úÖ Finnhub API connection successful")
    else:
        print("‚ö†Ô∏è  Finnhub API test failed. Please verify your API key.")
        print("   You can continue setup and test later.")
    
    # Trading API
    print_section("Trading API (Alpaca)")
    print("Get a free paper trading account from https://alpaca.markets")
    print("1. Sign up for free account")
    print("2. Go to 'Paper Trading' section")
    print("3. Generate API Key and Secret Key")
    print("4. You get $100k virtual money for testing")
    print()
    
    config['ALPACA_API_KEY'] = get_user_input(
        "Alpaca API Key",
        required=True,
        validator=validate_api_key
    )
    
    config['ALPACA_SECRET_KEY'] = get_user_input(
        "Alpaca Secret Key",
        required=True,
        validator=validate_api_key
    )
    
    # Test Alpaca API
    print("üîç Testing Alpaca API connection...")
    if test_alpaca_api(config['ALPACA_API_KEY'], config['ALPACA_SECRET_KEY']):
        print("‚úÖ Alpaca API connection successful")
    else:
        print("‚ö†Ô∏è  Alpaca API test failed. Please verify your API keys.")
        print("   Make sure you're using paper trading keys.")
    
    # Application Settings
    print_section("Application Settings")
    
    config['ENVIRONMENT'] = get_user_input(
        "Environment",
        default="development",
        required=False
    )
    
    config['HOST'] = get_user_input(
        "Host",
        default="0.0.0.0",
        required=False
    )
    
    config['PORT'] = get_user_input(
        "Port",
        default="8080",
        required=False
    )
    
    config['LOG_LEVEL'] = get_user_input(
        "Log Level",
        default="INFO",
        required=False
    )
    
    config['DEBUG_MODE'] = get_user_input(
        "Debug Mode",
        default="true",
        required=False
    )
    
    # Create .env file
    print_section("Creating Configuration File")
    create_env_file(config)
    print("‚úÖ .env file created successfully!")
    
    # Next steps
    print_section("Next Steps")
    print("1. Validate your setup: python3 validate-environment.py")
    print("2. Install dependencies: pip install -r requirements.txt")
    print("3. Run the application: python3 app.py")
    print("4. Test in Slack: /trade AAPL 100 BUY")
    print("5. For Render deployment: Follow POSTGRESQL_DEPLOYMENT_GUIDE.md")
    print()
    print("üéâ Setup complete! Your Slack Trading Bot is ready to run.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        sys.exit(1)